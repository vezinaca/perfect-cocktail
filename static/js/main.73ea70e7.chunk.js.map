{"version":3,"sources":["components/Header.js","components/Footer.js","reducers/FavoritesReducer.js","contexts/FavoritesContext.js","utilities/Utilities.js","components/MyModal.js","components/Drink.js","pages/Alcoholic.js","pages/Category.js","components/Cocktail.js","pages/Ingredient.js","pages/Home.js","pages/Favorites.js","App.js","serviceWorker.js","index.js"],"names":["Header","Nav","className","Container","Item","Link","as","to","Button","variant","size","updatedFavorites","Footer","ACTIONS","setStorage","favorites","localStorage","setItem","JSON","stringify","length","FavoritesReducer","state","action","type","push","payload","done","filter","favorite","idDrink","FavoriteContext","createContext","initialState","getItem","parse","FavoriteContextProvider","children","useReducer","dispatch","Provider","value","getIngredients","cocktail","ingredients","i","ingredientMeasure","ingredient","measure","MyModal","showModal","handleClose","beverage","allIngredients","Modal","show","onHide","closeButton","Title","strDrink","Body","ListGroup","ListGroupItem","strInstructions","onClick","Drink","drink","useContext","useState","setShowModal","myDrink","setMyDrink","setIngredients","drinkId","a","fetch","apiResponse","json","drinks","useEffect","getDrinkById","map","isFavorite","findIndex","item","btnFavText","Col","md","Card","style","width","e","preventDefault","Img","src","strDrinkThumb","Text","Home","setDrinks","alcoholics","setAlcoholics","category","res","data","fetchAlcoholic","allDrinks","Row","Jumbotron","Form","Group","Label","Control","onChange","getDrinksByAlcoholicCategory","target","alcoholic","index","strAlcoholic","id","Category","categories","setCategories","fetchCategories","getDrinksByCategory","strCategory","Cocktail","cocktailName","setCocktailName","cocktails","setCocktails","allCocktails","InputGroup","name","placeholder","Favorites","handleShow","handleRemove","console","log","allFavorites","alt","Table","scope","App","exact","path","component","Ingredient","Alcoholic","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.73ea70e7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Nav from \"react-bootstrap/Nav\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\n\nexport default function Header(){\n    return(\n        <>\n            <header>\n                <Nav className=\"navbar navbar-expand-lg navbar-dark bg-secondary\"> \n                    <Container>\n                        <ul className=\"navbar-nav mr-auto\">\n                            <Nav.Item>\n                                <Nav.Link as={Link} to=\"/\"><li><h4 className=\"sitename\">PERFECT<span>COCKTAIL</span></h4></li></Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link as={Link} to=\"/\"><li className=\"nav-item\">Cocktail Name</li></Nav.Link>\n                            </Nav.Item>  \n                            <Nav.Item>\n                                <Nav.Link as={Link} to=\"/ingredient\"><li className=\"nav-item\">Ingredient</li></Nav.Link>\n                            </Nav.Item>  \n                            <Nav.Item>\n                                <Nav.Link as={Link} to=\"/category\"><li className=\"nav-item\">Category</li></Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link as={Link} to=\"/alcoholic\"><li className=\"nav-item\">Alcohol/non alcohol</li></Nav.Link>\n                            </Nav.Item>  \n                        </ul>     \n                        <Nav.Item>\n                                <Nav.Link as={Link} to=\"/favorites\"><Button variant=\"danger\" size=\"sm\">My Favorites</Button>\n                                    <div className=\"dropdown\">\n                                    </div>\n                                </Nav.Link>\n                            </Nav.Item>\n                    </Container>\n                </Nav>\n            </header>\n        </>\n    )\n}","import React from \"react\";\n\nconst Footer = () => {\n    return(\n        <footer className=\"bg-secondary p-4\">\n            <div className=\"container\">\n                <div className=\"row justify-content-between\">\n                    <div className=\"col-md-4\">\n                        <h5 className=\"sitename\">PERFECT<span>COCKTAIL</span> </h5>\n                    </div>\n                    <div className=\"col-md-4\">\n                        <p className=\"text-right\">All Rights Reserved </p>\n                    </div>\n                </div>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from \"react\";\n\nexport const ACTIONS = {\n    ADD_TO_FAVORITES : \"add-to-favorites\",\n    REMOVE_FROM_FAVORITES: \"remove-from-favorites\",\n}\n\nconst setStorage = (favorites) => {\n    localStorage.setItem('favorites', JSON.stringify(favorites.length > 0 ? favorites: []));\n}\n\nlet updatedFavorites;\nexport function FavoritesReducer(state, action){\n    switch(action.type){\n        case ACTIONS.ADD_TO_FAVORITES:\n            updatedFavorites = [...state.favorites];\n            updatedFavorites.push({...action.payload}); \n            setStorage(updatedFavorites);\n            return { favorites: updatedFavorites, done: false};\n\n        case ACTIONS.REMOVE_FROM_FAVORITES:\n            updatedFavorites = state.favorites.filter(favorite => favorite.idDrink !== action.payload)\n            setStorage(updatedFavorites);\n            return {favorites: updatedFavorites, done: false }\n\n        default:\n            return state;\n\n    }\n}","import React, { useReducer, createContext} from \"react\";\nimport { FavoritesReducer } from \"../reducers/FavoritesReducer\";\n\nexport const FavoriteContext = createContext();\n\nconst storage = localStorage.getItem('favorites') ? JSON.parse(localStorage.getItem('favorites')) : [];\nconst initialState = {favorites: storage, done: false}\n\nexport function FavoriteContextProvider({children}){\n\n    const [state, dispatch] = useReducer(FavoritesReducer, initialState);\n\n    return(\n        <FavoriteContext.Provider value={[state, dispatch]}>\n            {children}\n        </FavoriteContext.Provider>\n    )\n}\n","// // Get recipe by name\n// export async function getDrinksByName(drinkName) {\n//     // Search by name\n//     const apiResponse = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${drinkName}`);\n//     // Returns a json respone\n//     const cocktails = await apiResponse.json();\n    \n    \n//     const lesDrinks = cocktails.drinks;\n//     console.log('les drinks dans getDrinksByname: ', cocktails.drinks);\n\n//     return lesDrinks;\n// }\n\n// // Get recipes by ingredient\n// export async function getDrinksByIngredient(ingredient) {\n//     // Search by Ingredient\n//     const apiResponse = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${ingredient}`);\n//     // Wait for response then return JSON\n//     const cocktails = await apiResponse.json();\n\n//     return {\n//          cocktails\n//     }\n// }\n\n// // get single recipe \n// export async function getSingleRecipe(id) {\n//     // Search by Ingredient\n//     const apiResponse = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${id}`);\n//     // Wait for response then return JSON\n//     const recipe = await apiResponse.json();\n\n//     return {\n//          recipe\n//     }\n// }\n\n// // Retrieves all the Categories from the REST API\n// export async function getCategories() {\n//     const apiResponse = await fetch('https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list');\n//     // Wait for response and return JSON\n//     const categories = await apiResponse.json();\n\n//     return {\n//          categories\n//     }\n// }\n\n// // Get Drinks By Category\n// export async function getDrinksByCategory( category ) {\n//     // Search by Category\n//     const apiResponse = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=${category}`);\n//     // Wait for response then return JSON\n//     const cocktails = await apiResponse.json();\n\n//     return {\n//          cocktails\n//     }\n// }\n\n// // Get alcohol or non alcohol drinks\n// export async function getDrinksByAlcohol( term ) {\n//     // Search by Category\n//     const apiResponse = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?a=${term}`);\n//     // Wait for response then return JSON\n//     const cocktails = await apiResponse.json();\n\n//     return {\n//          cocktails\n//     }\n// }\n\nexport function getIngredients(cocktail){\n    let ingredients = [];\n      for(let i = 1; i < 16; i++) {\n           const ingredientMeasure = {};\n           if( cocktail[`strIngredient${i}`] !== null ) {\n                ingredientMeasure.ingredient = cocktail[`strIngredient${i}`];\n                ingredientMeasure.measure = cocktail[`strMeasure${i}`];\n                ingredients.push(ingredientMeasure);\n           }\n      }\n\n      return ingredients;\n\n}","import React from \"react\";\n\nimport Button from \"react-bootstrap/Button\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\nimport Modal from \"react-bootstrap/Modal\";\n\nexport default function MyModal({showModal, handleClose, beverage, allIngredients}){\n\n    return (\n        <>\n            <Modal show={showModal} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{beverage.strDrink}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <ListGroup>\n                        <ListGroupItem variant=\"success\">Preparation</ListGroupItem>\n                        <ListGroupItem >{beverage.strInstructions}</ListGroupItem>\n                        <ListGroupItem variant=\"success\">Ingredients </ListGroupItem>\n                        \n                            {allIngredients}\n                        \n                    </ListGroup>\n                </Modal.Body>\n                <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}","import React, { useContext, useEffect, useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\nimport { FavoriteContext } from \"../contexts/FavoritesContext\";\nimport { ACTIONS } from \"../reducers/FavoritesReducer\";\nimport {getIngredients} from \"../utilities/Utilities\";\nimport MyModal from \"./MyModal\";\n\nexport default function Drink({drink}){\n\n    const [state, dispatch] = useContext(FavoriteContext);\n    const [showModal, setShowModal] = useState(false);\n    const [myDrink, setMyDrink] = useState({});\n    const [ingredients, setIngredients] = useState([])\n\n    function handleFavorites(e){\n        e.preventDefault();\n        if (!isFavorite){\n            dispatch({type: ACTIONS.ADD_TO_FAVORITES, payload: drink})\n        } else {\n            dispatch({type: ACTIONS.REMOVE_FROM_FAVORITES, payload: drink.idDrink})\n        }\n        \n    }\n\n    const handleShow = () => {\n        \n        //console.log(\"myDrink dans handleShow: \", myDrink);\n        setIngredients(getIngredients(myDrink));\n        setShowModal(true);\n    }\n\n    const handleClose = () => setShowModal(false);\n\n    async function getDrinkById(drinkId) {\n        \n        const apiResponse = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${drinkId}`);\n        const cocktail = await apiResponse.json();\n        setMyDrink(cocktail.drinks[0]);\n    }\n\n    useEffect(() => {\n        getDrinkById(drink.idDrink);\n    }, []);\n\n    const allIngredients = ingredients.map(ingredient => (\n        <ListGroupItem key={ingredient.ingredient}>{ingredient.ingredient} - {ingredient.measure}</ListGroupItem>\n    ))\n    \n    let isFavorite = (state.favorites.findIndex(item => item.idDrink === drink.idDrink) !== -1);\n\n    let btnFavText = isFavorite ? '-' : '+';\n    let classNotFav = 'favorite-btn btn btn-outline-info';\n    let classFav = 'favorite-btn btn btn-outline-info is-favorite';\n\n    return(\n        <>\n            <Col md=\"6\" >\n                <Card className=\"my-3 mx-auto\" style={{ width: '22rem' }}>\n                    {/* <Button onClick={handleFavorites} className={isFavorite ? classNotFav : classFav}>{btnFavText}</Button> */}\n                    <button onClick={handleFavorites} className={isFavorite ? classFav : classNotFav}>{btnFavText}</button>\n                    <Card.Img variant=\"top\" src={drink.strDrinkThumb} width=\"10px\"/>\n                    <Card.Body>\n                        <Card.Title className=\"text-center\">{drink.strDrink}</Card.Title>\n                        \n                        <Card.Text>\n                            \n                            <Button onClick={handleShow} variant=\"success\">GET RECIPE</Button>\n                        </Card.Text>\n                        \n                    </Card.Body>\n                </Card>\n            </Col>\n            <MyModal showModal={showModal} handleClose={handleClose} beverage={myDrink} allIngredients={allIngredients} />\n        </>\n    )\n}","import React, { useState, useContext, useEffect } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\nimport Drink from \"../components/Drink\";\n\nexport default function Home(){\n\n    const [drinks, setDrinks] = useState([]);\n    const [alcoholics, setAlcoholics] = useState([]);\n  \n    // Get Drinks By Category\n    async function getDrinksByAlcoholicCategory( category ) {\n        // Search by Category\n        const res = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?a=${category}`);\n        // Wait for response then return JSON\n        const data = await res.json();\n        //console.log(\"in getDrinksByCategory in Category.js: \", data.drinks);\n        setDrinks(data.drinks)        \n   }\n\n    // Retrieves all the Categories from the REST API\n    async  function fetchAlcoholic() {\n        const res = await fetch('https://www.thecocktaildb.com/api/json/v1/1/list.php?a=list');\n        // Wait for response and return JSON\n        const data = await res.json();\n        //console.log(data.drinks);\n        setAlcoholics(data.drinks);\n   }\n\n    function handleChange(e){\n        e.preventDefault();        \n        getDrinksByAlcoholicCategory(e.target.value);\n    }\n\n    useEffect(() =>{\n        fetchAlcoholic();\n    }, [])\n\n    const allDrinks = drinks.map(drink => (\n        <Drink key={drink.idDrink} drink={drink} />\n    ))\n   \n    return(\n        \n        <Container className=\"mt-5\">\n            <Row className=\"justify-content-center\">\n                \n                    <Jumbotron className=\"col-12 col-md-10\">\n                        <h3 className=\"text-center\">Search Cocktails by Alcohol / Non Alcohol</h3>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Form.Group>\n                                        <Form.Label>Category Name: </Form.Label>\n                                            <Form.Control as=\"select\" onChange={handleChange}>\n                                                <option>- Select -</option>\n                                                {\n                                                    alcoholics.map((alcoholic, index) => (\n                                                        <option key={index}>{alcoholic.strAlcoholic}</option>\n                                                    ))\n                                                }\n                                                \n                                           </Form.Control>\n                                    </Form.Group>\n                                </Form>\n                            </Col>\n                        </Row>\n                        {drinks.length !== 0 ? <h3 className=\"text-center mt-5\">Results: <span id=\"total\"></span></h3> : null}\n                        \n                        <Row className=\"mt-5\">\n                            \n                                {allDrinks}\n                            \n                        </Row>\n                    </Jumbotron>\n            </Row>\n        </Container>\n        \n    )\n}","import React, { useState, useContext, useEffect } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\nimport Drink from \"../components/Drink\";\n\nexport default function Category(){\n\n    const [drinks, setDrinks] = useState([]);\n    const [categories, setCategories] = useState([]);\n    \n    // Get Drinks By Category\n    async function getDrinksByCategory( category ) {\n        // Search by Category\n        const res = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=${category}`);\n        // Wait for response then return JSON\n        const data = await res.json();\n        setDrinks(data.drinks)\n   }\n\n    // Retrieves all the Categories from the REST API\n    async  function fetchCategories() {\n        const res = await fetch('https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list');\n        // Wait for response and return JSON\n        const data = await res.json();\n        //console.log(data.drinks);\n        setCategories(data.drinks);\n   }\n\n    function handleChange(e){\n        e.preventDefault();\n        getDrinksByCategory(e.target.value);\n    }\n\n    useEffect(() =>{\n        fetchCategories();\n    }, [])\n\n    const allDrinks = drinks.map(drink => (\n        <Drink key={drink.idDrink} drink={drink} />\n    ))\n    return(\n        <Container className=\"mt-5\">\n            <Row className=\"justify-content-center\">\n                    <Jumbotron className=\"col-12 col-md-10\">\n                        <h3 className=\"text-center\">Search Cocktails by Category</h3>\n                        <Row>\n                            <Col>\n                                <Form>\n                                    <Form.Group>\n                                        <Form.Label>Category Name: </Form.Label>\n                                            <Form.Control as=\"select\" onChange={handleChange}>\n                                                <option>- Select -</option>\n                                                {\n                                                    categories.map(category => (\n                                                        <option key={category.strCategory}>{category.strCategory}</option>\n                                                    ))\n                                                }\n                                                \n                                           </Form.Control>\n                                    </Form.Group>\n                                </Form>\n                            </Col>\n                        </Row>\n                        {drinks.length !== 0 ? <h3 className=\"text-center mt-5\">Results: <span id=\"total\"></span></h3> : null}\n                        <Row className=\"mt-5\">\n                            \n                                {allDrinks}\n                            \n                        </Row>\n                    </Jumbotron>    \n            </Row>\n        </Container>\n    )\n}","import React, { useContext } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\nimport { FavoriteContext } from \"../contexts/FavoritesContext\";\nimport { ACTIONS } from \"../reducers/FavoritesReducer\";\nimport {getIngredients} from \"../utilities/Utilities\"\n\nexport default function Cocktail({cocktail}){\n\n    const [state, dispatch] = useContext(FavoriteContext);\n\n    function handleFavorites(e){\n        e.preventDefault();\n        if (!isFavorite){\n            dispatch({type: ACTIONS.ADD_TO_FAVORITES, payload: cocktail})\n        } else {\n            dispatch({type: ACTIONS.REMOVE_FROM_FAVORITES, payload: cocktail.idDrink})\n        }\n        \n    }\n\n    const allIngredients = getIngredients(cocktail).map((ingredient, index) => (\n        <ListGroupItem key={index}>{ingredient.ingredient} - {ingredient.measure}</ListGroupItem>\n    ))\n    \n    //state.cartItems[state.cartItems.findIndex(item => item.idDrink === action.payload)].quantity\n    let isFavorite = (state.favorites.findIndex(item => item.idDrink === cocktail.idDrink) !== -1);\n    //console.log(\"isFavorite: \", isFavorite);\n    \n    // let btnFavText = '';\n    \n\n    // if (isFavorite){\n    //     btnFavText = '-';\n        \n    // }\n    // else\n    //     btnFavText = '+';\n        \n    let btnFavText = isFavorite ? '-' : '+';\n\n    let classNotFav = 'favorite-btn btn btn-outline-info';\n    let classFav = 'favorite-btn btn btn-outline-info is-favorite';\n\n    return(\n        <>\n            <Col md=\"6\" >\n                <Card className=\"my-3 mx-auto\" style={{width: '22rem'}} >\n                    {/* <Button onClick={handleFavorites} className={isFavorite ? classNotFav : classFav}>{btnFavText}</Button> */}\n                    <button onClick={handleFavorites} className={isFavorite ? classFav : classNotFav}>{btnFavText}</button>\n                    <Card.Img variant=\"top\" src={cocktail.strDrinkThumb} />\n                    <Card.Body>\n                        <Card.Title className=\"text-center\">{cocktail.strDrink}</Card.Title>\n                        <Card.Text className=\"font-weight-bold\">Instructions</Card.Text>\n                        <Card.Text>{cocktail.strInstructions}</Card.Text>\n                            <ListGroup>\n                                <ListGroupItem variant=\"danger\">\n                                    Ingredients\n                                </ListGroupItem>\n                                {allIngredients}\n                            </ListGroup>\n                        <Card.Text className=\"font-weight-bold\">Extra Information: </Card.Text>\n                        <Card.Text>\n                            <span className=\"badge badge-pill badge-success\">{cocktail.strAlcoholic}</span>\n                            <span className=\"badge badge-pill badge-warning\">Category: {cocktail.strCategory}</span>\n                        </Card.Text>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </>\n    )\n}","import React, { useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport Cocktail from \"../components/Cocktail\";\n\nexport default function Home(){\n\n    const [cocktailName, setCocktailName] = useState([]);\n    const [cocktails, setCocktails] = useState([]);\n    \n     async function fetchCocktail(e){\n        e.preventDefault();\n        const res = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${cocktailName}`);\n        const data = await res.json();\n        setCocktails(data.drinks);\n    }\n\n    const allCocktails = cocktails.map(cocktail => (\n        <Cocktail key={cocktail.idDrink} cocktail={cocktail} />\n    ))\n    return(\n        <Container className=\"mt-5\">\n            <Row className=\"justify-content-center\">\n                <Jumbotron className=\"col-12 col-md-10\">\n                    <h3 className=\"text-center\">Search Cocktails by Ingredients</h3>\n                    <Row>\n                        <Col>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Label>Ingredient Name: </Form.Label>\n                                    <InputGroup>\n                                    <Form.Control type=\"text\" onChange={(e) => setCocktailName(e.target.value)} value={cocktailName} name=\"user\" placeholder=\"i.e Gin or Tequila or Vodka\"/>\n                                    </InputGroup>\n                                </Form.Group>\n                                <Button variant=\"success\" onClick={fetchCocktail}>Get cocktails</Button>\n                            </Form>\n                        </Col>\n                    </Row>\n                    {cocktails.length !== 0 ? <h3 className=\"text-center mt-5\">Results: <span id=\"total\"></span></h3> : null}\n                    <Row className=\"mt-5\">\n                        \n                            {allCocktails}\n                        \n                    </Row>\n                </Jumbotron>\n            </Row>\n        </Container>\n        \n    )\n}","import React, { useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Form from \"react-bootstrap/Form\";\nimport Cocktail from \"../components/Cocktail\";\n\nexport default function Home(){\n\n    const [cocktailName, setCocktailName] = useState([]);\n    const [cocktails, setCocktails] = useState([]);\n    \n     async function fetchCocktail(e){\n        e.preventDefault();\n        const res = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${cocktailName}`);\n        const data = await res.json();\n        setCocktails(data.drinks);\n    }\n\n    const allCocktails = cocktails.map(cocktail => (\n        <Cocktail key={cocktail.idDrink} cocktail={cocktail} />\n    ))\n\n    return(\n        <Container className=\"mt-5\">\n            <Row className=\"justify-content-center\">\n                <Jumbotron className=\"col-12 col-md-10\">\n                    <h3 className=\"text-center\">Search Cocktails by Name</h3>\n                    <Row>\n                        <Col>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Label>Cocktail Name: </Form.Label>\n                                    <InputGroup>\n                                    <Form.Control type=\"text\" onChange={(e) => setCocktailName(e.target.value)} value={cocktailName} name=\"user\" placeholder=\"i.e Margarita\"/>\n                                    </InputGroup>\n                                </Form.Group>\n                                <Button variant=\"success\" onClick={fetchCocktail}>Get cocktails</Button>\n                            </Form>\n                        </Col>\n                    </Row>\n                    {cocktails.length !== 0 ? <h3 className=\"text-center mt-5\">Results: <span id=\"total\"></span></h3> : null}\n                    <Row className=\"mt-5\">\n                        \n                            {allCocktails}\n                        \n                    </Row>\n                </Jumbotron>                \n            </Row>\n        </Container>        \n    )\n}","import React, { useContext, useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Button from \"react-bootstrap/Button\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Table from \"react-bootstrap/Table\";\nimport ListGroupItem from \"react-bootstrap/ListGroupItem\";\nimport { ACTIONS } from \"../reducers/FavoritesReducer\";\nimport { FavoriteContext } from \"../contexts/FavoritesContext\";\nimport MyModal from \"../components/MyModal\";\nimport {getIngredients} from \"../utilities/Utilities\";\n\nexport default function Favorites(){\n\n    const [state, dispatch] = useContext(FavoriteContext);\n    const [showModal, setShowModal] = useState(false);\n    const [myDrink, setMyDrink] = useState({});\n    const [ingredients, setIngredients] = useState([]);   \n\n    async function getDrinkById(drinkId) {        \n        const apiResponse = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${drinkId}`);\n        const cocktail = await apiResponse.json();\n        setMyDrink(cocktail.drinks[0]);\n        setIngredients(getIngredients(myDrink));\n    }\n\n    function handleShow(e){\n        e.preventDefault();\n        getDrinkById(e.target.value);\n        setShowModal(true);\n    }\n\n    function handleRemove(e){   \n        console.log('e.target.value dans favs page: ', e.target.value);     \n        dispatch({type: ACTIONS.REMOVE_FROM_FAVORITES, payload: e.target.value})\n    }\n\n    function handleClose(){\n        setShowModal(false);\n    }\n\n    const allFavorites = state.favorites.map(favorite => (\n        <tr key={favorite.idDrink}>\n            <td><img width=\"100px\" src={favorite.strDrinkThumb} alt=\"problem\"></img></td>\n            <td>{favorite.strDrink}</td>\n            <td><Button size=\"sm\" variant=\"success\" onClick={handleShow} value={favorite.idDrink}>View</Button></td>\n            <td><Button size=\"sm\" variant=\"danger\" onClick={handleRemove} value={favorite.idDrink}>Remove</Button></td>\n        </tr>\n    ))\n\n   \n    const allIngredients = ingredients.map((ingredient, index) => (\n        <ListGroupItem key={index}>{ingredient.ingredient} - {ingredient.measure}</ListGroupItem>\n    ))\n\n    return(\n        <>\n            <Container className=\"mt-5\">\n                <Row className=\"justify-content-center\">\n                    <Jumbotron className=\"col-12 col-md-10\">\n                            <h1 className=\"text-center\">My Favorites</h1>\n                            <Row>\n                                <Col>\n                                    <Table id=\"favorites\" className=\"table table-light\">\n                                            <thead className=\"bg-danger\">\n                                                <tr>\n                                                    <th scope=\"col\">Image</th>\n                                                    <th scope=\"col\">Name</th>\n                                                    <th scope=\"col\">View</th>\n                                                    <th scope=\"col\">Remove</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {allFavorites}\n                                            </tbody>\n                                    </Table>\n                                </Col>\n                            </Row>\n                        </Jumbotron>\n                    </Row>\n\n            </Container>\n            <MyModal showModal={showModal} handleClose={handleClose} beverage={myDrink} allIngredients={allIngredients} />\n        </>\n        \n    )\n}","import React, { useState } from 'react';\nimport './App.css';\nimport \"./Bootstrap.css\";\nimport './Custom.css';\n\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Alcoholic from \"./pages/Alcoholic\";\nimport Category from \"./pages/Category\";\nimport Ingredient from \"./pages/Ingredient\";\nimport Home from \"./pages/Home\";\nimport Favorites from './pages/Favorites';\nimport { FavoriteContextProvider } from \"./contexts/FavoritesContext\";\n\nimport { BrowserRouter as Browser, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n   \n  return (\n    <FavoriteContextProvider>\n        <Browser>\n            <div className=\"App\">  \n                <Header /> \n                    <Switch>         \n                        <Route exact path=\"/\" component={Home}/>\n                        <Route path=\"/ingredient\" component={Ingredient}/>\n                        <Route path=\"/category\" component={Category}/>\n                        <Route path=\"/alcoholic\" component={Alcoholic}/>\n                        <Route path=\"/favorites\" component={Favorites} />\n                    </Switch>\n                <Footer />\n            </div>\n        </Browser>\n    </FavoriteContextProvider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n//   <React.StrictMode>\n    <App />\n//   </React.StrictMode>\n    ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}