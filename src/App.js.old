import React, {useState} from 'react';
import './App.css';
import 'bootstrap/dist/css/bootstrap.min.css';
import Button from "react-bootstrap/Button";
import axios from "axios";
import Jumbotron from "react-bootstrap/Jumbotron";
import Form from "react-bootstrap/Form";
import FormControl from "react-bootstrap/FormControl";
import Repo from "./Repo";
let isSubmitted = false;

function App() {

    //state serait object avec submitted...

    const[user, setUser] = useState(''); 
    const [repos, setRepos] = useState([]);

    //const [state, setState] = useState({repos: [], isSubmitted: false})

    let message = null;    

  const myFetch = async () => {
    isSubmitted = true; 
    console.log('submitted in fetch: ', isSubmitted);

    // try {
    //     const res = await axios.get(`https://api.github.com/users/${user}/repos`);
    //     setRepos(res.data);
    // } catch (error) {
    //   console.log(error);
    // } finally {
    //   console.log('dans le finally');
    // }

    //////////////////////////////////

    try {
        const res = await fetch(`https://api.github.com/users/${user}/repos`);
        const data = await res.json();
        console.log(data);
        setRepos(data);
    } catch (error) {
      console.log(error);
    } finally {
      console.log('dans le finally');
    }
    
  }

  let allRepos;
  
  console.log('repos lenth: ', repos.length);

  if (repos.length != null){
        allRepos = repos.map(repo => (
       <Repo key={repo.id} repo={repo} />
        ))
    }
    else {
        allRepos = "nothing found";
    }



  const jumboAllRepos = (<Jumbotron> {allRepos} </Jumbotron>)

  console.log("repos length: ", repos.length);
  if (isSubmitted){
    message = <Jumbotron> bad user name </Jumbotron>;
    console.log('submitted: ', isSubmitted);
  } else {
    //   message = <Jumbotron> not submitted </Jumbotron>;
    message = null;
      console.log('not submitted: ', isSubmitted);
  }
  
  console.log('stuff before return');
  return (
    <div className="App">
      <header className="App-header">
          <Form>
              <Form.Group>
                  <Form.Label>Username</Form.Label>
                  <Form.Control type="text" onChange={(e) => setUser(e.target.value)} value={user} name="user" placeholder="Enter github username"/>
              </Form.Group>
          </Form>
         
          <Button variant="primary" onClick={myFetch} className="mt-3 mb-3">
            Submit
          </Button>
      </header>
      <main className="App-main">
          { isSubmitted ? jumboAllRepos : message    }
        
        {/* <Jumbotron>
            {allRepos}
          
        </Jumbotron> */}
        
      </main>
    </div>
  );
}

export default App;
